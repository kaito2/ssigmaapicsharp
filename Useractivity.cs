// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ssigmaapi/type/useractivity.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Ssigmaapi.Type {

  /// <summary>Holder for reflection information generated from ssigmaapi/type/useractivity.proto</summary>
  public static partial class UseractivityReflection {

    #region Descriptor
    /// <summary>File descriptor for ssigmaapi/type/useractivity.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static UseractivityReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiFzc2lnbWFhcGkvdHlwZS91c2VyYWN0aXZpdHkucHJvdG8SDnNzaWdtYWFw",
            "aS50eXBlIo0CCgxVc2VyQWN0aXZpdHkSFwoPc3RhcnRfdGltZXN0YW1wGAEg",
            "ASgDEhUKDWVuZF90aW1lc3RhbXAYAiABKAMSNQoOa2V5Ym9hcmRfaW5wdXQY",
            "AyABKAsyHS5zc2lnbWFhcGkudHlwZS5LZXlib2FyZElucHV0EjYKC3dpbmRv",
            "d19saXN0GAQgAygLMiEuc3NpZ21hYXBpLnR5cGUuQXBwbGljYXRpb25XaW5k",
            "b3cSOgoKdXNlcl9zdGF0ZRgFIAEoDjImLnNzaWdtYWFwaS50eXBlLlVzZXJB",
            "Y3Rpdml0eS5Vc2VyU3RhdGUiIgoJVXNlclN0YXRlEgsKB1dPUktJTkcQABII",
            "CgRBV0FZEAEiJQoNS2V5Ym9hcmRJbnB1dBIUCgxzdHJva2VfY291bnQYASAB",
            "KAMiHQoFUG9pbnQSCQoBeBgBIAEoAxIJCgF5GAIgASgDIs0CChFBcHBsaWNh",
            "dGlvbldpbmRvdxImCgdsZWZ0dG9wGAEgASgLMhUuc3NpZ21hYXBpLnR5cGUu",
            "UG9pbnQSDgoGaGVpZ2h0GAIgASgDEg0KBXdpZHRoGAMgASgDEg0KBXRpdGxl",
            "GAQgASgJEhQKDHByb2dyYW1fbmFtZRgFIAEoCRITCgtkZXNjcmlwdGlvbhgG",
            "IAEoCRIPCgdjb21wYW55GAcgASgJEhUKDWlzX2ZvcmVncm91bmQYCCABKAgS",
            "QwoMd2luZG93X3N0YXRlGAkgASgOMi0uc3NpZ21hYXBpLnR5cGUuQXBwbGlj",
            "YXRpb25XaW5kb3cuV2luZG93U3RhdGUSEQoJdGltZXN0YW1wGAogASgDIjcK",
            "C1dpbmRvd1N0YXRlEgoKBk5PUk1BTBAAEg0KCU1BWElNSVpFRBABEg0KCU1J",
            "TklNSVpFRBACQj5aPGdpdGh1Yi5jb20va2FpdG8yL3NzaWdtYWFwaWdvL3R5",
            "cGUvdXNlcmFjdGl2aXR5O3VzZXJhY3Rpdml0eWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Ssigmaapi.Type.UserActivity), global::Ssigmaapi.Type.UserActivity.Parser, new[]{ "StartTimestamp", "EndTimestamp", "KeyboardInput", "WindowList", "UserState" }, null, new[]{ typeof(global::Ssigmaapi.Type.UserActivity.Types.UserState) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ssigmaapi.Type.KeyboardInput), global::Ssigmaapi.Type.KeyboardInput.Parser, new[]{ "StrokeCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ssigmaapi.Type.Point), global::Ssigmaapi.Type.Point.Parser, new[]{ "X", "Y" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ssigmaapi.Type.ApplicationWindow), global::Ssigmaapi.Type.ApplicationWindow.Parser, new[]{ "Lefttop", "Height", "Width", "Title", "ProgramName", "Description", "Company", "IsForeground", "WindowState", "Timestamp" }, null, new[]{ typeof(global::Ssigmaapi.Type.ApplicationWindow.Types.WindowState) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class UserActivity : pb::IMessage<UserActivity> {
    private static readonly pb::MessageParser<UserActivity> _parser = new pb::MessageParser<UserActivity>(() => new UserActivity());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserActivity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ssigmaapi.Type.UseractivityReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserActivity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserActivity(UserActivity other) : this() {
      startTimestamp_ = other.startTimestamp_;
      endTimestamp_ = other.endTimestamp_;
      keyboardInput_ = other.keyboardInput_ != null ? other.keyboardInput_.Clone() : null;
      windowList_ = other.windowList_.Clone();
      userState_ = other.userState_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserActivity Clone() {
      return new UserActivity(this);
    }

    /// <summary>Field number for the "start_timestamp" field.</summary>
    public const int StartTimestampFieldNumber = 1;
    private long startTimestamp_;
    /// <summary>
    /// milisecond
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartTimestamp {
      get { return startTimestamp_; }
      set {
        startTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "end_timestamp" field.</summary>
    public const int EndTimestampFieldNumber = 2;
    private long endTimestamp_;
    /// <summary>
    /// milisecond
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EndTimestamp {
      get { return endTimestamp_; }
      set {
        endTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "keyboard_input" field.</summary>
    public const int KeyboardInputFieldNumber = 3;
    private global::Ssigmaapi.Type.KeyboardInput keyboardInput_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ssigmaapi.Type.KeyboardInput KeyboardInput {
      get { return keyboardInput_; }
      set {
        keyboardInput_ = value;
      }
    }

    /// <summary>Field number for the "window_list" field.</summary>
    public const int WindowListFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Ssigmaapi.Type.ApplicationWindow> _repeated_windowList_codec
        = pb::FieldCodec.ForMessage(34, global::Ssigmaapi.Type.ApplicationWindow.Parser);
    private readonly pbc::RepeatedField<global::Ssigmaapi.Type.ApplicationWindow> windowList_ = new pbc::RepeatedField<global::Ssigmaapi.Type.ApplicationWindow>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Ssigmaapi.Type.ApplicationWindow> WindowList {
      get { return windowList_; }
    }

    /// <summary>Field number for the "user_state" field.</summary>
    public const int UserStateFieldNumber = 5;
    private global::Ssigmaapi.Type.UserActivity.Types.UserState userState_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ssigmaapi.Type.UserActivity.Types.UserState UserState {
      get { return userState_; }
      set {
        userState_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserActivity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserActivity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StartTimestamp != other.StartTimestamp) return false;
      if (EndTimestamp != other.EndTimestamp) return false;
      if (!object.Equals(KeyboardInput, other.KeyboardInput)) return false;
      if(!windowList_.Equals(other.windowList_)) return false;
      if (UserState != other.UserState) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StartTimestamp != 0L) hash ^= StartTimestamp.GetHashCode();
      if (EndTimestamp != 0L) hash ^= EndTimestamp.GetHashCode();
      if (keyboardInput_ != null) hash ^= KeyboardInput.GetHashCode();
      hash ^= windowList_.GetHashCode();
      if (UserState != 0) hash ^= UserState.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StartTimestamp != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(StartTimestamp);
      }
      if (EndTimestamp != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(EndTimestamp);
      }
      if (keyboardInput_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(KeyboardInput);
      }
      windowList_.WriteTo(output, _repeated_windowList_codec);
      if (UserState != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) UserState);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StartTimestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTimestamp);
      }
      if (EndTimestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTimestamp);
      }
      if (keyboardInput_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(KeyboardInput);
      }
      size += windowList_.CalculateSize(_repeated_windowList_codec);
      if (UserState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) UserState);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserActivity other) {
      if (other == null) {
        return;
      }
      if (other.StartTimestamp != 0L) {
        StartTimestamp = other.StartTimestamp;
      }
      if (other.EndTimestamp != 0L) {
        EndTimestamp = other.EndTimestamp;
      }
      if (other.keyboardInput_ != null) {
        if (keyboardInput_ == null) {
          keyboardInput_ = new global::Ssigmaapi.Type.KeyboardInput();
        }
        KeyboardInput.MergeFrom(other.KeyboardInput);
      }
      windowList_.Add(other.windowList_);
      if (other.UserState != 0) {
        UserState = other.UserState;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StartTimestamp = input.ReadInt64();
            break;
          }
          case 16: {
            EndTimestamp = input.ReadInt64();
            break;
          }
          case 26: {
            if (keyboardInput_ == null) {
              keyboardInput_ = new global::Ssigmaapi.Type.KeyboardInput();
            }
            input.ReadMessage(keyboardInput_);
            break;
          }
          case 34: {
            windowList_.AddEntriesFrom(input, _repeated_windowList_codec);
            break;
          }
          case 40: {
            userState_ = (global::Ssigmaapi.Type.UserActivity.Types.UserState) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the UserActivity message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum UserState {
        [pbr::OriginalName("WORKING")] Working = 0,
        [pbr::OriginalName("AWAY")] Away = 1,
      }

    }
    #endregion

  }

  public sealed partial class KeyboardInput : pb::IMessage<KeyboardInput> {
    private static readonly pb::MessageParser<KeyboardInput> _parser = new pb::MessageParser<KeyboardInput>(() => new KeyboardInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KeyboardInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ssigmaapi.Type.UseractivityReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyboardInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyboardInput(KeyboardInput other) : this() {
      strokeCount_ = other.strokeCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyboardInput Clone() {
      return new KeyboardInput(this);
    }

    /// <summary>Field number for the "stroke_count" field.</summary>
    public const int StrokeCountFieldNumber = 1;
    private long strokeCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StrokeCount {
      get { return strokeCount_; }
      set {
        strokeCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KeyboardInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KeyboardInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StrokeCount != other.StrokeCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StrokeCount != 0L) hash ^= StrokeCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StrokeCount != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(StrokeCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StrokeCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StrokeCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KeyboardInput other) {
      if (other == null) {
        return;
      }
      if (other.StrokeCount != 0L) {
        StrokeCount = other.StrokeCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StrokeCount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Point : pb::IMessage<Point> {
    private static readonly pb::MessageParser<Point> _parser = new pb::MessageParser<Point>(() => new Point());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Point> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ssigmaapi.Type.UseractivityReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Point() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Point(Point other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Point Clone() {
      return new Point(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private long x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private long y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Point);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Point other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0L) hash ^= X.GetHashCode();
      if (Y != 0L) hash ^= Y.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(X);
      }
      if (Y != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Y);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(X);
      }
      if (Y != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Y);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Point other) {
      if (other == null) {
        return;
      }
      if (other.X != 0L) {
        X = other.X;
      }
      if (other.Y != 0L) {
        Y = other.Y;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            X = input.ReadInt64();
            break;
          }
          case 16: {
            Y = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ApplicationWindow : pb::IMessage<ApplicationWindow> {
    private static readonly pb::MessageParser<ApplicationWindow> _parser = new pb::MessageParser<ApplicationWindow>(() => new ApplicationWindow());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApplicationWindow> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ssigmaapi.Type.UseractivityReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationWindow() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationWindow(ApplicationWindow other) : this() {
      lefttop_ = other.lefttop_ != null ? other.lefttop_.Clone() : null;
      height_ = other.height_;
      width_ = other.width_;
      title_ = other.title_;
      programName_ = other.programName_;
      description_ = other.description_;
      company_ = other.company_;
      isForeground_ = other.isForeground_;
      windowState_ = other.windowState_;
      timestamp_ = other.timestamp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationWindow Clone() {
      return new ApplicationWindow(this);
    }

    /// <summary>Field number for the "lefttop" field.</summary>
    public const int LefttopFieldNumber = 1;
    private global::Ssigmaapi.Type.Point lefttop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ssigmaapi.Type.Point Lefttop {
      get { return lefttop_; }
      set {
        lefttop_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 2;
    private long height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 3;
    private long width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 4;
    private string title_ = "";
    /// <summary>
    /// ウィンドウタイトル
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "program_name" field.</summary>
    public const int ProgramNameFieldNumber = 5;
    private string programName_ = "";
    /// <summary>
    /// アプリ名（MicrosoftR WindowsR Operation System、Slack、Google Chromeなど）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProgramName {
      get { return programName_; }
      set {
        programName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 6;
    private string description_ = "";
    /// <summary>
    /// アプリ詳細名（エクスプローラー、Slack、Google Chromeなど）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "company" field.</summary>
    public const int CompanyFieldNumber = 7;
    private string company_ = "";
    /// <summary>
    /// アプリ開発元
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Company {
      get { return company_; }
      set {
        company_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_foreground" field.</summary>
    public const int IsForegroundFieldNumber = 8;
    private bool isForeground_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsForeground {
      get { return isForeground_; }
      set {
        isForeground_ = value;
      }
    }

    /// <summary>Field number for the "window_state" field.</summary>
    public const int WindowStateFieldNumber = 9;
    private global::Ssigmaapi.Type.ApplicationWindow.Types.WindowState windowState_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ssigmaapi.Type.ApplicationWindow.Types.WindowState WindowState {
      get { return windowState_; }
      set {
        windowState_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 10;
    private long timestamp_;
    /// <summary>
    /// milisecond
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApplicationWindow);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApplicationWindow other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Lefttop, other.Lefttop)) return false;
      if (Height != other.Height) return false;
      if (Width != other.Width) return false;
      if (Title != other.Title) return false;
      if (ProgramName != other.ProgramName) return false;
      if (Description != other.Description) return false;
      if (Company != other.Company) return false;
      if (IsForeground != other.IsForeground) return false;
      if (WindowState != other.WindowState) return false;
      if (Timestamp != other.Timestamp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (lefttop_ != null) hash ^= Lefttop.GetHashCode();
      if (Height != 0L) hash ^= Height.GetHashCode();
      if (Width != 0L) hash ^= Width.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (ProgramName.Length != 0) hash ^= ProgramName.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Company.Length != 0) hash ^= Company.GetHashCode();
      if (IsForeground != false) hash ^= IsForeground.GetHashCode();
      if (WindowState != 0) hash ^= WindowState.GetHashCode();
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (lefttop_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Lefttop);
      }
      if (Height != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Height);
      }
      if (Width != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Width);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Title);
      }
      if (ProgramName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ProgramName);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Description);
      }
      if (Company.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Company);
      }
      if (IsForeground != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsForeground);
      }
      if (WindowState != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) WindowState);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (lefttop_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Lefttop);
      }
      if (Height != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Height);
      }
      if (Width != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Width);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (ProgramName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProgramName);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Company.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Company);
      }
      if (IsForeground != false) {
        size += 1 + 1;
      }
      if (WindowState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) WindowState);
      }
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApplicationWindow other) {
      if (other == null) {
        return;
      }
      if (other.lefttop_ != null) {
        if (lefttop_ == null) {
          lefttop_ = new global::Ssigmaapi.Type.Point();
        }
        Lefttop.MergeFrom(other.Lefttop);
      }
      if (other.Height != 0L) {
        Height = other.Height;
      }
      if (other.Width != 0L) {
        Width = other.Width;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.ProgramName.Length != 0) {
        ProgramName = other.ProgramName;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Company.Length != 0) {
        Company = other.Company;
      }
      if (other.IsForeground != false) {
        IsForeground = other.IsForeground;
      }
      if (other.WindowState != 0) {
        WindowState = other.WindowState;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (lefttop_ == null) {
              lefttop_ = new global::Ssigmaapi.Type.Point();
            }
            input.ReadMessage(lefttop_);
            break;
          }
          case 16: {
            Height = input.ReadInt64();
            break;
          }
          case 24: {
            Width = input.ReadInt64();
            break;
          }
          case 34: {
            Title = input.ReadString();
            break;
          }
          case 42: {
            ProgramName = input.ReadString();
            break;
          }
          case 50: {
            Description = input.ReadString();
            break;
          }
          case 58: {
            Company = input.ReadString();
            break;
          }
          case 64: {
            IsForeground = input.ReadBool();
            break;
          }
          case 72: {
            windowState_ = (global::Ssigmaapi.Type.ApplicationWindow.Types.WindowState) input.ReadEnum();
            break;
          }
          case 80: {
            Timestamp = input.ReadInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ApplicationWindow message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum WindowState {
        [pbr::OriginalName("NORMAL")] Normal = 0,
        [pbr::OriginalName("MAXIMIZED")] Maximized = 1,
        [pbr::OriginalName("MINIMIZED")] Minimized = 2,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
